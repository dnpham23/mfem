--- a/fem/pfespace.hpp
+++ b/fem/pfespace.hpp
@@ -20,6 +20,8 @@
 #include "../mesh/pmesh.hpp"
 #include "../mesh/nurbs.hpp"
 #include "fespace.hpp"
+#include <unordered_map>
+#include <unordered_set>

 
 namespace mfem
 {
@@ -428,6 +429,38 @@ void GetExteriorTrueDofs(Array<int> &ext_tdof_list,
                             int component = -1) const override;
 
+   /** Get a list of edge degrees of freedom on the boundary with the specified
+       attributes. This function correctly handles parallel meshes by removing
+       artificial boundary edges that appear at processor boundaries.
+       @param[in] bdr_attr_marker Array marking which boundary attributes to include
+       @param[out] ess_tdof_list Array of essential true DOF indices
+       @param[out] dof_to_edge Optional map from DOFs to edge indices
+       @param[out] dof_to_orientation Optional map from DOFs to edge orientations
+       @param[out] boundary_edge_dofs_out Optional set of boundary edge DOFs
+       @param[out] dof_to_boundary_element_out Optional map from DOFs to boundary elements
+       @param[out] ess_edge_list Optional array of edge indices */
+   void GetBoundaryEdgeDoFs(const Array<int> &bdr_attr_marker,
+                           Array<int> &ess_tdof_list,
+                           std::unordered_map<int, int> *dof_to_edge = nullptr,
+                           std::unordered_map<int, int> *dof_to_orientation = nullptr,
+                           std::unordered_set<int> *boundary_edge_dofs_out = nullptr,
+                           std::unordered_map<int, int> *dof_to_boundary_element_out = nullptr,
+                           Array<int> *ess_edge_list = nullptr);
+
+   /** Simplified interface for single boundary attribute */
+   void GetBoundaryEdgeDoFs(int bdr_attr, Array<int> &ess_tdof_list);
+
+   /** Compute edge orientations relative to a loop direction defined by a normal vector.
+       This is useful for applying circulation boundary conditions.
+       @param[in] dof_to_edge Map from DOFs to edge indices
+       @param[in] dof_to_boundary_element Map from DOFs to boundary elements
+       @param[in] loop_normal Normal vector defining the loop direction
+       @param[out] edge_loop_orientations Map from edge indices to orientations (+1 or -1) */
+   void ComputeLoopEdgeOrientations(const std::unordered_map<int, int>& dof_to_edge,
+                                   const std::unordered_map<int, int>& dof_to_boundary_element,
+                                   const Vector& loop_normal,
+                                   std::unordered_map<int, int>& edge_loop_orientations);
+
    /** If the given ldof is owned by the current processor, return its local
        tdof number, otherwise return -1 */
    int GetLocalTDofNumber(int ldof) const;